;***********************************
;multinest is the default sampler
;***********************************
[runtime]
sampler = fisher
root = 
;
[grid]
nsample_dimension=20
;
[fisher]
step_size = 0.05
num_diff_type = three-point
;num_diff_type = five-point
;
[output]
filename=github_repo/case_1/CS_3x2pt.txt
format=text

[DEFAULT]
2PT_FILE =likelihood/des-y3/2pt_NG_final_2ptunblind_02_24_21_wnz_covupdate.v2.fits

;
[pipeline]
quiet=F
timing=T
debug=F
modules = consistency bbn_consistency camb sigma8_rescale extrapolate fast_pt load_nz load_nz_lens lens_photoz_width  lens_photoz_bias  source_photoz_bias IA pk_to_cl_gg pk_to_cl add_magnification add_intrinsic shear_m_bias add_point_mass 2pt_like
values = github_repo/case_1/euclid_values.ini
likelihoods = euclid

fast_slow = F
first_fast_module = shear_m_bias
;
[2pt_like]
file = likelihood/2pt/2pt_like.py
data_file = github_repo/case_1/output/euclid_simulation.fits
covmat_name=COVMAT
like_name=euclid
data_sets= shear_cl galaxy_shear_cl galaxy_cl
; You can also add these data sets, but without a flexible enough model for bias they
; give phenomenally powerful and sadly unrealistic constraints:
; galaxy_cl galaxy_shear_cl
;
;
;
#The remainder of the pipeline is identical to the one used in the euclid_analyze.ini
#file adjacent to this one.
#We could put this text in a file euclid_common.ini and use the command:
#%include euclid_common.ini but I didn't want to people.
;
[consistency]
file = utility/consistency/consistency_interface.py
;
;[camb]
;file = boltzmann/camb/camb.so
;mode=all
;feedback=0
;accuracy_boost = 2.
;l_accuracy_boost = 2.
;high_accuracy_default = T
;transfer_high_precision = T
;nk=10000
;kmin=1e-6
;kmax=50.
;nz = 500



[camb]
file = boltzmann/camb/camb_interface.py
mode = all
lmax = 2500          ;max ell to use for cmb calculation
feedback=3         ;amount of output to print
AccuracyBoost=1.1 ;CAMB accuracy boost parameter
do_tensors = T
do_lensing = T
NonLinear = pk
halofit_version = takahashi
zmin_background = 0.
zmax_background = 4.
nz_background = 500
kmin=1e-6
kmax = 50.0
kmax_extrapolate = 500.0
nk=10000
use_ppf_w=T

[pk_to_cl_gg]
file = structure/projection/project_2d.py
lingal-lingal = lens-lens
do_exact = 
do_rsd = True
ell_min_linspaced = 1
ell_max_linspaced = 4
n_ell_linspaced = 5
ell_min_logspaced = 5.
ell_max_logspaced = 5.e5
n_ell_logspaced = 50
limber_ell_start = 200
ell_max_logspaced=1.e5
;auto_only=
sig_over_dchi_exact = 3.5

[pk_to_cl]
file = structure/projection/project_2d.py
ell_min_logspaced = 0.1
ell_max_logspaced = 5.0e5
n_ell_logspaced = 50
;Position-position = lens-lens
shear-shear = source-source
shear-intrinsic = source-source
intrinsic-intrinsic = source-source
intrinsicb-intrinsicb=source-source
;position-intrinsic=lens-source
;position-shear=lens-source
lingal-shear = lens-source
lingal-intrinsic = lens-source
lingal-magnification = lens-lens
magnification-shear = lens-source
magnification-magnification = lens-lens
magnification-intrinsic = lens-source 
verbose = F
get_kernel_peaks = F
sig_over_dchi = 20. 
shear_kernel_dchi = 10. 

[extrapolate]
file = boltzmann/extrapolate/extrapolate_power.py
kmax = 500.

[fast_pt]
file = structure/fast_pt/fast_pt_interface.py
do_ia = T
k_res_fac = 0.5
verbose = F

[IA]
file = intrinsic_alignments/tatt/tatt_interface.py
sub_lowk = F
do_galaxy_intrinsic = F
ia_model = tatt

;
[sigma8_rescale]
file = utility/sample_sigma8/sigma8_rescale.py
;
[halofit]
file = cosmosis-euclid-library/boltzmann/halofit/halofit_interface.so
do_nonlinear=T
accuracy_boost = 2.
l_accuracy_boost = 2.
high_accuracy_default = T
transfer_high_precision = T
nk=10000
kmin=1e-6
kmax=50.
nz = 500
;
[no_bias]
file = bias/no_bias/no_bias.py
use_lin_power = False
;
[bin_bias]
file = bias/binwise_bias/bin_bias.py
perbin = T
auto_only = F
;
;[intrinsic_alignment]
;file = cosmosis-euclid-library/intrinsic_alignments/eNLA/linear_alignments_interface.py
;method = bk_corrected
;
; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and
; from geometry)
;
;[pk_to_cl]
;file = structure/projection/project_2d.py
;ell_min_logspaced = 10.0
;ell_max_logspaced = 750.0
;n_ell_logspaced = 20
;limber_rel_tol = 1.e-12
;shear-shear = source-source
;position-shear = source-source
;position-position= source-source
;shear-intrinsic = source-source
;intrinsic-intrinsic = source-source
;position-intrinsic = source-source
;verbose = T

;[pk_to_cl]
;file = structure/projection/project_2d.py
;ell_min_logspaced = 0.1
;ell_max_logspaced = 5.0e5
;n_ell_logspaced = 100 
;Position-position = lens-lens
;shear-shear = source-source
;shear-intrinsic = source-source
;intrinsic-intrinsic = source-source
;intrinsicb-intrinsicb=source-source
;position-intrinsic=lens-source
;position-shear=lens-source
;lingal-shear = lens-source
;lingal-intrinsic = lens-source
;lingal-magnification = lens-lens
;magnification-shear = lens-source
;magnification-magnification = lens-lens
;magnification-intrinsic = lens-source 
;verbose = F
;get_kernel_peaks = F
;sig_over_dchi = 20. 
;shear_kernel_dchi = 20. 


[2pt_shear]
file = shear/cl_to_xi_fullsky/cl_to_xi_interface.py
ell_max = 40000
xi_type = EB
theta_file=%(2PT_FILE)s
bin_avg = T
; these get
input_section_name = shear_cl  shear_cl_bb
output_section_name = shear_xi_plus  shear_xi_minus

[2pt_gal]
file = shear/cl_to_xi_fullsky/cl_to_xi_interface.py
ell_max = 40000
xi_type='00'
theta_file=%(2PT_FILE)s
bin_avg = T

[2pt_gal_shear]
file = shear/cl_to_xi_fullsky/cl_to_xi_interface.py
ell_max = 40000
xi_type='02'
theta_file=%(2PT_FILE)s
bin_avg = T

;
;[add_intrinsic]
;file=shear/add_intrinsic/add_intrinsic.py
;shear-shear=T
;position-shear=T

[add_intrinsic]
file=shear/add_intrinsic/add_intrinsic.py
shear-shear=T
position-shear=T
perbin=F


;
[load_nz]
file = number_density/load_nz/load_nz.py
filepath = github_repo/case_1/nofz.dat
output_section = nz_source

[load_nz_lens]
file = number_density/load_nz/load_nz.py
filepath = github_repo/case_1/nofz.dat
output_section = nz_lens


[shear_m_bias]
file = shear/shear_bias/shear_m_bias.py
m_per_bin = True
; Despite the parameter name, this can operate on xi as well as C_ell.
cl_section = shear_cl
cross_section = galaxy_shear_cl
verbose = F

[lens_photoz_width]
file = number_density/photoz_width/photoz_width.py
mode = stretch
sample = nz_lens
bias_section = lens_photoz_errors
interpolation = linear

[lens_photoz_bias]
file = number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_lens
bias_section = lens_photoz_errors
interpolation = linear

[source_photoz_bias]
file = number_density/photoz_bias/photoz_bias.py
mode = additive
sample = nz_source
bias_section = wl_photoz_errors
interpolation = linear

[bbn_consistency]
file = utility/bbn_consistency/bbn_consistency.py

[add_magnification]
file = structure/magnification/add_magnification.py
include_intrinsic=T

[add_point_mass]
file=shear/point_mass/add_gammat_point_mass.py
add_togammat = False
use_fiducial = True
sigcrit_inv_section = sigma_crit_inv_lens_source

[sigma8_rescale]
file = utility/sample_sigma8/sigma8_rescale.py